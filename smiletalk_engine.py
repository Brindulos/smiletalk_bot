import random
import pandas as pd
import unicodedata
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

df = pd.read_csv("SITUATIONS.csv", sep=";")

def nettoyer(texte):
    return texte.lower().replace("‚Äô", "'").strip()

def normaliser(texte):
    return unicodedata.normalize("NFKD", texte).encode("ascii", "ignore").decode("utf-8").strip().lower()

def contient_mots(texte, mots):
    return any(m in texte for m in mots)

def similarite_reformulation(texte1, texte2):
    vect = CountVectorizer().fit_transform([texte1, texte2])
    return cosine_similarity(vect[0], vect[1])[0][0]

def analyser_reponse(user_response, row):
    user_response = nettoyer(user_response)

    feedback = []
    bonne_reponse = nettoyer(row['bonne-reponse'])

    solution_text = normaliser(str(row['solution']))
    solutionnable = "oui" in solution_text

    info_op = row['informations op√©rationnelles']

    marqueurs_empathie = ["d√©sol√©", "navr√©", "je comprends", "vraiment d√©sol√©", "vraiment navr√©", "bien s√ªr", "mince", "c'est embetant"]
    mots_conflit = ["mais", "en revanche", "par contre", "n√©anmoins", "toutefois"]
    mots_adoucis = ["maintenant", "apr√®s", "justement"]
    formes_imperatives = ["il faut", "vous n'avez qu'√†", "il suffit de"]
    formulations_douces = ["je vous invite", "je vous conseille", "peut-√™tre pouvez-vous", "je peux vous proposer"]
    formules_finales = ["ok pour vous", "c'est bon pour vous", "c'est bon", "√ßa vous va"]

    # V√©rifie pr√©sence empathie
    if not contient_mots(user_response, marqueurs_empathie):
        feedback.append("üôÅ Il manque une expression d‚Äôempathie explicite (‚Äòd√©sol√©‚Äô, ‚Äòje comprends‚Äô‚Ä¶).")
    
    # V√©rifie reformulation plus souple
    similarite = similarite_reformulation(user_response, nettoyer(row['situation']))
    if similarite < 0.2:
        feedback.append("üîÅ La situation n‚Äôest pas reformul√©e : essaye de montrer que tu as compris ce que vit le spectateur.")

    # V√©rifie mots de confrontation
    if contient_mots(user_response, mots_conflit):
        feedback.append("‚ö†Ô∏è Tu utilises des mots de confrontation (‚Äòmais‚Äô, ‚Äòpar contre‚Äô‚Ä¶). Essaie plut√¥t ‚Äòapr√®s‚Äô, ‚Äòjustement‚Äô‚Ä¶")

    # V√©rifie si la solution est adoucie
    if contient_mots(user_response, formes_imperatives):
        feedback.append("üìè Attention √† ne pas imposer la solution (‚Äòil faut‚Äô, ‚Äòvous n‚Äôavez qu‚Äô√†‚Äô‚Ä¶). Propose-la avec tact.")
    
    if solutionnable:
        if not contient_mots(user_response, formulations_douces + formules_finales):
            feedback.append("üí° La solution devrait √™tre propos√©e de fa√ßon douce et terminer par une question (‚ÄòOK pour vous ?‚Äô).")
    else:
        if not contient_mots(user_response, ["d√©sol√©", "malheureusement", "je n‚Äôai pas", "je suis emb√™t√©", "c‚Äôest compliqu√©"]):
            feedback.append("üß± Ce litige n‚Äôa pas de solution : il faut le dire honn√™tement, avec tact.")

    return feedback, row["feedback"], info_op

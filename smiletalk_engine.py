import pandas as pd
import openai

# Chargement des situations
df = pd.read_csv("SITUATIONS.csv", sep=";")

def analyser_reponse_chatgpt(user_response, row, texte_ref):
    public = row['public']
    situation = row['situation']
    relance = row.get("relance", "").strip()
    bonne_reponse = row['bonne-reponse']
    bonne_reponse_relance = row.get("bonne-reponse-relance", "").strip()
    info_op = row.get("informations op√©rationnelles", "").strip()

    # D√©tection si on est en r√©ponse √† la relance
    en_reponse_a_la_relance = texte_ref.strip() == relance and relance != ""

    # Choix du texte d‚Äôexemple attendu
    exemple_attendu = bonne_reponse_relance if en_reponse_a_la_relance and bonne_reponse_relance else bonne_reponse

    prompt = f"""
Tu es formateur Smile Talk pour les √©quipes d‚Äôaccueil du Paris Saint-Germain. Tu √©values la qualit√© d‚Äôune r√©ponse donn√©e par un agent dans une situation difficile avec un spectateur.

Situation initiale : {situation}

Relance du spectateur : {relance if relance else 'Aucune'}

R√©ponse de l‚Äôagent : {user_response}

Ta mission :
- Commence par √©crire un feedback p√©dagogique synth√©tique sur la r√©ponse (maximum 4 lignes).
- Si l‚Äôagent r√©pond √† la relance, ton analyse doit se concentrer uniquement sur la relance.
- Commente la pr√©sence ou non d‚Äôempathie, la reformulation, la qualit√© de la solution et la mani√®re de la formuler (pas d‚Äôimp√©ratif).
- Sois formateur, pr√©cis, bienveillant mais sans compliment inutile.

Ensuite, donne un exemple de r√©ponse attendue adapt√©e √† ce cas pr√©cis (pas une r√©ponse g√©n√©rique). Termine par ce format :

üìã Feedback :
[ton analyse]

üí¨ Exemple attendu :
[exemple adapt√©]
    """

    try:
        completion = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Tu es un assistant expert en formation relationnelle en contexte sportif (Parc des Princes)."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=400
        )

        texte = completion['choices'][0]['message']['content'].strip()

        # S√©paration feedback / exemple
        if "üí¨ Exemple attendu :" in texte:
            feedback, exemple = texte.split("üí¨ Exemple attendu :", 1)
            feedback = feedback.replace("üìã Feedback :", "").strip()
            exemple = exemple.strip()
        else:
            feedback = texte
            exemple = exemple_attendu

        return [feedback], exemple, ""  # pas besoin d'info op√©rationnelle ici
    except Exception as e:
        return [f"Erreur lors de l‚Äôanalyse avec ChatGPT : {e}"], exemple_attendu, ""

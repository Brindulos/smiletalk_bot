import random
import pandas as pd
import unicodedata
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

df = pd.read_csv("SITUATIONS.csv", sep=";")

def nettoyer(texte):
    return texte.lower().replace("‚Äô", "'").strip()

def normaliser(texte):
    return unicodedata.normalize("NFKD", texte).encode("ascii", "ignore").decode("utf-8").strip().lower()

def contient_mots(texte, mots):
    return any(m in texte for m in mots)

def similarite_reformulation(texte1, texte2):
    vect = CountVectorizer().fit_transform([texte1, texte2])
    return cosine_similarity(vect[0], vect[1])[0][0]

def analyser_reponse(user_response, row):
    import unicodedata
    from sklearn.feature_extraction.text import CountVectorizer
    from sklearn.metrics.pairwise import cosine_similarity

    def nettoyer(texte):
        return texte.lower().replace("‚Äô", "'").strip()

    def normaliser(texte):
        return unicodedata.normalize("NFKD", texte).encode("ascii", "ignore").decode("utf-8").strip().lower()

    def contient_mots(texte, mots):
        return any(m in texte for m in mots)

    def similarite_reformulation(texte1, texte2):
        vect = CountVectorizer().fit_transform([texte1, texte2])
        return cosine_similarity(vect[0], vect[1])[0][0]

    user_response = nettoyer(user_response)
    feedback = []

    solution_text = normaliser(str(row['solution']))
    solutionnable = "oui" in solution_text
    info_op = row['informations op√©rationnelles']
    bonne_reponse = nettoyer(row['bonne-reponse'])

    # ‚úÖ Choix du texte de r√©f√©rence (relance ou situation)
    if row.get("relance_utilisee", False) and isinstance(row.get("relance"), str) and row["relance"].strip():
        texte_ref = nettoyer(row["relance"])
    else:
        texte_ref = nettoyer(row["situation"])

    marqueurs_empathie = ["d√©sol√©", "navr√©", "je comprends", "vraiment d√©sol√©", "vraiment navr√©", "bien s√ªr", "mince", "c'est embetant"]
    mots_conflit = ["mais", "en revanche", "par contre", "n√©anmoins", "toutefois"]
    formes_imperatives = ["il faut", "vous n'avez qu'√†", "il suffit de"]
    formulations_douces = ["je vous invite", "je vous conseille", "peut-√™tre pouvez-vous", "je peux vous proposer"]
    formules_finales = ["ok pour vous", "c'est bon pour vous", "c'est bon", "√ßa vous va"]

    # ‚úÖ Empathie
    if not contient_mots(user_response, marqueurs_empathie):
        feedback.append("üôÅ Il manque une expression d‚Äôempathie explicite (‚Äòd√©sol√©‚Äô, ‚Äòje comprends‚Äô‚Ä¶).")

    # ‚úÖ Reformulation (via similarit√© souple)
    similarite = similarite_reformulation(user_response, texte_ref)
    if similarite < 0.2:
        feedback.append("üîÅ La situation n‚Äôest pas reformul√©e : essaye de montrer que tu as compris ce que vit le spectateur.")

    # ‚úÖ Mots de confrontation
    if contient_mots(user_response, mots_conflit):
        feedback.append("‚ö†Ô∏è Tu utilises des mots de confrontation (‚Äòmais‚Äô, ‚Äòpar contre‚Äô‚Ä¶). Essaie plut√¥t ‚Äòapr√®s‚Äô, ‚Äòjustement‚Äô‚Ä¶")

    # ‚úÖ Forme imp√©rative
    if contient_mots(user_response, formes_imperatives):
        feedback.append("üìè Attention √† ne pas imposer la solution (‚Äòil faut‚Äô, ‚Äòvous n‚Äôavez qu‚Äô√†‚Äô‚Ä¶). Propose-la avec tact.")

    # ‚úÖ Pr√©sence d‚Äôune solution formul√©e avec tact
    if solutionnable:
        if not contient_mots(user_response, formulations_douces + formules_finales):
            feedback.append("üí° La solution devrait √™tre propos√©e de fa√ßon douce et terminer par une question (‚ÄòOK pour vous ?‚Äô).")
    else:
        if not contient_mots(user_response, ["d√©sol√©", "malheureusement", "je n‚Äôai pas", "je suis emb√™t√©", "c‚Äôest compliqu√©"]):
            feedback.append("üß± Ce litige n‚Äôa pas de solution : il faut le dire honn√™tement, avec tact.")

    return feedback, row["bonne-reponse"], info_op

